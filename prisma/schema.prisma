generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "relationJoins"]
}

generator typegraphql {
  provider        = "typegraphql-prisma"
  emitOnly        = ["enums", "models", "relationResolvers"]
  simpleResolvers = true
  useSimpleInputs = true
  emitIdAsIDType  = true
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES")
}

model User {
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  id            String   @id @default(cuid())
  fid           Int      @unique
  unclaimedMerv Float    @default(0)

  /// @TypeGraphQL.omit(output: true, input: true)
  authTokens                  AuthToken[]
  /// @TypeGraphQL.omit(output: true, input: true)
  farcasterNotificationTokens FarcasterNotificationToken[]
}

model FarcasterNotificationToken {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  token String @unique
  url   String
}

model AuthToken {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  id        String   @id @default(cuid())
  token     String /// @zod.custom.use(z.string().refine(validator.isJWT))
  userAgent String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@index([token])
}
