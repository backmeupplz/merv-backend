generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "relationJoins"]
}

generator typegraphql {
  provider        = "typegraphql-prisma"
  emitOnly        = ["enums", "models", "relationResolvers"]
  simpleResolvers = true
  useSimpleInputs = true
  emitIdAsIDType  = true
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES")
}

model User {
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  id            String   @id @default(cuid())
  fid           Int      @unique
  unclaimedMerv Float    @default(0)

  /// @TypeGraphQL.omit(output: true, input: true)
  authTokens                  AuthToken[]
  /// @TypeGraphQL.omit(output: true, input: true)
  farcasterNotificationTokens FarcasterNotificationToken[]
  /// @TypeGraphQL.omit(output: true, input: true)
  signerRequests              SignerRequest[]
  /// @TypeGraphQL.omit(output: true, input: true)
  signers                     Signer[]

  signersRewarded Signer[] @relation("castRewardUser")

  rewards MervReward[]
}

model FarcasterNotificationToken {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  token String @unique
  url   String
}

model AuthToken {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  id        String   @id @default(cuid())
  token     String /// @zod.custom.use(z.string().refine(validator.isJWT))
  userAgent String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@index([token])
}

enum SignerRequestStatus {
  PENDING
  SIGNED
  EXPIRED
}

model SignerRequest {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  id        String   @id @default(cuid())

  owner      User                @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId    String
  deepLink   String
  status     SignerRequestStatus @default(PENDING)
  /// @TypeGraphQL.omit(output: true, input: true)
  privateKey String
  /// @TypeGraphQL.omit(output: true, input: true)
  token      String
}

model Signer {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  id        String   @id @default(cuid())
  fid       Int
  username  String

  owner      User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId    String
  /// @TypeGraphQL.omit(output: true, input: true)
  privateKey String

  castCompleted    Boolean @default(false)
  castRewardUser   User?   @relation("castRewardUser", fields: [castRewardUserId], references: [id], onDelete: Cascade)
  castRewardUserId String?
}

enum RewardType {
  CAST
}

model MervReward {
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  id        String     @id @default(cuid())
  type      RewardType
  amount    Float

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}
